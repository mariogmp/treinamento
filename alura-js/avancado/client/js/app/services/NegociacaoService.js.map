{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","error","listaTodos","apagaTodos","listaAtual","_obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService{\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana(){        \n\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/semana\").then(negociacoes => {\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n            }).catch(error => {\n                console.log(erro);\n                reject(\"Não foi possível obter as negociações da semana\");\n            })\n        })\n    }\n\n    obterNegociacoesDaSemanaAnterior(){        \n\n        return new Promise((resolve, reject) => {\n\n            this._http.get(\"negociacoes/anterior\").then(negociacoes => {\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n            }).catch(error => {\n                console.log(erro);\n                reject(\"Não foi possível obter as negociações da semana anterior\");\n            })\n        })\n    }    \n\n    obterNegociacoesDaSemanaRetrasada(){        \n\n        return new Promise((resolve, reject) => {\n\n            this._http.get(\"negociacoes/anterior\").then(negociacoes => {\n                resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n            }).catch(error => {\n                console.log(erro);\n                reject(\"Não foi possível obter as negociações da semana retrasada\");\n            })\n        })\n    }        \n\n    _obterNegociacoes() {\n        \n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n    \n    cadastra(negociacao){\n\n        return ConnectionFactory.getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.adiciona(negociacao))\n                .then(() => 'Negociação adicionada com sucesso.')\n                .catch((error) => {\n                    console.log(error);\n                    throw new Error('Erro ao adicionar negociação.');\n                });        \n    }\n\n    lista() {\n\n        return ConnectionFactory.getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.listaTodos())\n                .catch((error) => {\n                    console.log(error);\n                    throw new Error('Erro ao listar negociações.');\n                });        \n    }\n\n    apaga() {\n\n        return ConnectionFactory.getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.apagaTodos())\n                .then(() => 'Negociações apagadas com sucesso.')\n                .catch((error) => {\n                    console.log(error);\n                    throw new Error('Erro ao listar negociações.');\n                });\n    }\n\n    importa(listaAtual){\n        \n        return this._obterNegociacoes()\n            .then(negociacoes => \n                // Filtrar para adicionar somente negociações que não existam (Não funcionou !!!)\n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n            )\n            .catch(error => {\n                console.log(error);\n                throw new Error('Erro ao listar negociações.');\n            });\n    }\n\n    /**\n    obterNegociacaoesDaSemana(callback){\n\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', '/negociacoes/semana');\n\n        // Cada vez que uma requisição Ajax muda de estado, essa função é chamada\n        xhr.onreadystatechange = () => {\n\n            // Estados possíveis de uma requisição ajax\n            // 0: Requisição não iniciada\n            // 1: Conexão com o servidor estabelecida\n            // 2: Requisição recebida\n            // 3: Processando requisição\n            // 4: Requisição concluída e resposta está pronta\n\n            if (xhr.readyState\n                 == 4){\n                // Verificação realizada para garantir que a requisição obteve sucesso\n                if (xhr.status == 200){\n                    // JSON transforma o texto da resposta em um objeto Javascript\n                    // Retorno o map de objetos criando instâncias de Negociacao\n                    // Percorro o map utilizando forEach e adicionando a negociacao na ListaNegociacoes\n                    callback(null, JSON.parse(xhr.responseText)\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n\n                }else{\n                    console.log(xhr.responseText);\n                    callback(\"Não foi possível obter as negociações da semana.\", null);\n                }\n            }\n        };\n        xhr.send();        \n    } */\n\n    /**\n    obterNegociacaoesDaSemanaAnterior(){\n\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET', '/negociacoes/anterior');\n    \n            xhr.onreadystatechange = () => {\n    \n                if (xhr.readyState == 4){\n                    if (xhr.status == 200){\n                        resolve(JSON.parse(xhr.responseText)\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n    \n                    }else{\n                        console.log(xhr.responseText);\n                        reject(\"Não foi possível obter as negociações da semana anterior.\");\n                    }\n                }\n            };\n            xhr.send();                    \n        })\n    }*/\n\n    /**\n    obterNegociacaoesDaSemanaAnterior(callback){\n         \n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', '/negociacoes/anterior');\n\n        xhr.onreadystatechange = () => {\n\n            if (xhr.readyState == 4){\n                if (xhr.status == 200){\n                    callback(null, JSON.parse(xhr.responseText)\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n\n                }else{\n                    console.log(xhr.responseText);\n                    callback(\"Não foi possível obter as negociações da semana anterior.\", null);\n                }\n            }\n        };\n        xhr.send();        \n    } */          \n\n    /**\n    obterNegociacaoesDaSemanaRetrasada(){\n\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET', '/negociacoes/retrasada');\n    \n            xhr.onreadystatechange = () => {\n    \n                if (xhr.readyState == 4){\n                    if (xhr.status == 200){\n                        resolve(JSON.parse(xhr.responseText)\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n    \n                    }else{\n                        console.log(xhr.responseText);\n                        reject(\"Não foi possível obter as negociações da semana retrasada.\");\n                    }\n                }\n            };\n            xhr.send();      \n        });                             \n    }*/\n    \n    /**\n    obterNegociacaoesDaSemanaRetrasada(callback){\n        \n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', '/negociacoes/retrasada');\n\n        xhr.onreadystatechange = () => {\n\n            if (xhr.readyState == 4){\n                if (xhr.status == 200){\n                    callback(null, JSON.parse(xhr.responseText)\n                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n\n                }else{\n                    console.log(xhr.responseText);\n                    callback(\"Não foi possível obter as negociações da semana retrasada.\", null);\n                }\n            }\n        };\n        xhr.send();        \n    } \n    */       \n}"]}