{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","target","error","cursor","openCursor","negociacoes","atual","evento","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAEhB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBN,uCAAOO,EAAEC,MAAF,CAASC,KAAhB;AACH,6BAFD;AAGH,yBAdM,CAAP;AAeH;;;iDAEW;AAAA;;AAER,+BAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIU,SAAS,OAAKf,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACkB,WADlB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRe,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOL,SAAP,GAAmB,kBAAU;;AAEzB;AACA,oCAAIQ,QAAQC,OAAON,MAAP,CAAcO,MAA1B;AACA,oCAAIF,KAAJ,EAAU;AACN,wCAAIG,OAAOH,MAAMI,KAAjB;AACAL,gDAAYM,IAAZ,CAAiB,IAAI1B,UAAJ,CAAewB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACA;AACAR,0CAAMS,QAAN;AACH,iCALD,MAKK;AACDvB,4CAAQa,WAAR;AACH;AACJ,6BAZD;;AAcAF,mCAAOJ,OAAP,GAAiB,aAAK;AAClBN,uCAAOO,EAAEC,MAAF,CAASC,KAAhB;AACH,6BAFD;AAGH,yBA1BM,CAAP;AA2BH;;;iDAEW;AAAA;;AAER,4BAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAE7B,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT2B,KAHS,EAAd;;AAKAtB,oCAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBN,uCAAOO,EAAEC,MAAF,CAASC,KAAhB;AACH,6BAFD;AAIH,yBAfD;AAgBH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao{\n\n    constructor(connection){\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n\n        return new Promise((resolve, reject) => {    \n\n            let request = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            }\n\n            request.onerror = e => {\n                reject(e.target.error);\n            }\n        })\n    }\n\n    listaTodos(){\n\n        return new Promise((resolve, reject) => {\n\n            let cursor = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .openCursor();  \n            \n            let negociacoes = [];\n\n            cursor.onsuccess = evento => { \n\n                // ponteiro\n                let atual = evento.target.result;\n                if (atual){\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    // chama mais uma vez o onsucess mas o ponteiro será a próxima negociação\n                    atual.continue();\n                }else{\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = e => {\n                reject(e.target.error);\n            }            \n        })\n    }\n\n    apagaTodos(){\n        \n        new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => {\n                resolve();\n            }\n\n            request.onerror = e => {\n                reject(e.target.error);\n            }\n            \n        })\n    }\n\n}"]}