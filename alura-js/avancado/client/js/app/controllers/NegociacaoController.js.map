{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["ListaNegociacoes","Mensagem","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","Negociacao","NegociacaoController","_service","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","_mensagem","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","texto","error","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","apaga","esvazia","importa","erro","textoParaData","value","parseInt","parseFloat","focus","negociacaoController","currentInstance"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["import {ListaNegociacoes} from '../models/ListaNegociacoes';\nimport {Mensagem} from '../models/Mensagem';\nimport {NegociacoesView} from '../views/NegociacoesView';\nimport {MensagemView} from '../views/MensagemView';\nimport {NegociacaoService} from '../services/NegociacaoService';\nimport {DateHelper} from '../helpers/DateHelper';\nimport {Bind} from '../helpers/Bind';\nimport {Negociacao} from '../models/Negociacao';\n\nclass NegociacaoController{\n\n    constructor(){\n\n        this._service = new NegociacaoService();\n\n        // Forma mais verbosa de se acessar os atributos do html\n        // let inputData = document.querySelector(\"#data\");\n        // let inputQuantidade = document.querySelector(\"#quantidade\");\n        // let inputValor = document.querySelector(\"#valor\");\n\n        // Coloca uma função dentro da variável \"$\" (Parecido com o jQuery)\n        // Não funciona da forma abaixo pois o método \"querySelector\" só funciona dentro do objeto \"document\"\n        // let $ = document.querySelector;        \n        // Faz com que o método \"querySelector\" seja possível de ser acessado dentro da variável \"$\".\n        let $ = document.querySelector.bind(document);\n\n        // Criando as variáveis como atributos da instância evita que a cada submissão do form o DOM seja necessite ser varrido\n        this._inputData = $(\"#data\");\n        this._inputQuantidade = $(\"#quantidade\");\n        this._inputValor = $(\"#valor\");\n\n        /** Estratégias para atualizar a View após alterações na ListaNegociacoes */\n\n        // Passando como parâmetro uma função com comportamento a ser executado quando ListaNegociacoes for construída\n        // Parâmetro \"this\" no caso é o NegociacaoController\n        // Preciso usar reflection dentro do ListaNegociacoes para trabahar com o contexto de NegociocaoController\n        /*\n        this._listaNegociacoes = new ListaNegociacoes(this, function(model){            \n            this._negociacoesView.update(model);\n        });\n        */\n\n        // Utilizando aerofunction o escopo do \"this\" é léxico e não dinâmico\n        // Não preciso usar reflection dentro do ListaNegociacoes\n        /**\n        this._listaNegociacoes = new ListaNegociacoes(model =>            \n            this._negociacoesView.update(model)\n        );  \n        */      \n\n        /** Utilizando proxy \n        \n        // Estratégia utilizando padrão de projeto Proxy\n        // Não é boa prática utilizar \"armadilhas\" dentro do modelo (no caso, da ListaNegociacoes)\n        // Será criado um proxy para o ListaNegociacoes, onde poderemos disparar as \"armadilhas\" antes de chamar o objeto ListaNegociacoes\n                \n        this._listaNegociacoes = ProxyFactory.create(\n            new ListaNegociacoes(), ['adiciona', 'esvazia'], model => this._negociacoesView.update(model));\n\n        this._negociacoesView = new NegociacoesView($(\"#negociacoesView\"));\n        // Preciso chamar pela primeira vez\n        // this._negociacoesView.update(this._listaNegociacoes);\n\n        this._mensagem = ProxyFactory.create(\n            new Mensagem(), ['texto'], model => this._mensagemView.update(model));\n\n        this._mensagemView = new MensagemView($(\"#mensagemView\"));\n        // Preciso chamar pela primeira vez\n        // this._mensagemView.update(this._mensagem);\n\n        */\n\n        // Utilizando estratégia de Binding\n        this._listaNegociacoes = new Bind(new ListaNegociacoes(), new NegociacoesView($('#negociacoesView')), 'adiciona', 'esvazia');\n        this._mensagem = new Bind(new Mensagem(), new MensagemView($('#mensagemView')), 'texto');\n\n        /** Utilizando um único \"then\"\n        ConnectionFactory.getConnection()\n            .then(connection => {\n                new NegociacaoDao(connection)\n                ._listaTodos()\n                    .then(negociacoes => {\n                        negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\n                })        \n            });\n        */\n\n        this._init();\n\n    }\n\n    _init(){\n\n        this._service.lista()\n            .then(negociacoes => negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao)))\n            .catch(error => this._mensagem.texto = error);\n\n        setInterval(() => this.importaNegociacoes(), 3000);\n    }\n\n    adiciona(event){\n\n        event.preventDefault();\n\n        let negociacao = this._criaNegociacao();  \n\n        this._service.cadastra(negociacao)\n            .then(mensagem => {\n                this._listaNegociacoes.adiciona(negociacao);\n                this._mensagem.texto = mensagem;\n                this._limpaFormulario();\n            })\n            .catch(error => this._mensagem.texto = error);    \n        \n        // Não necessita mais ser chamado pois o update está sendo chamado no construtor do ListaNegociacoes\n        // this._negociacoesView.update(this._listaNegociacoes);\n        \n        // Caso o get negociacoes não seja tratado, essa linha de código cria indevidamente uma negociação\n        // this._listaNegociacoes.negociacoes.push(this._criaNegociacao());\n\n        // this._mensagemView.update(this._mensagem);\n\n        // this._limpaFormulario();\n    }\n\n    apaga(){\n\n        this._service.apaga()\n            .then(mensagem => {\n                this._mensagem.texto = mensagem;\n                this._listaNegociacoes.esvazia();                \n            })\n            .catch(error => this._mensagem.texto = error);\n            \n        // Não necessita mais ser chamado pois o update está sendo chamado no construtor do ListaNegociacoes\n        // this._negociacoesView.update(this._listaNegociacoes);\n\n        //this._mensagemView.update(this._mensagem);\n    }\n\n    importaNegociacoes(){    \n\n        // Pyramid of Doom - Problema característico de requisições assíncronas Ajax\n        // As requisições foram aninhadas para serem chamadas uma após a outra (se fossem chamadas aleatoriamente os dados poderiam ficar fora de ordem)\n        /**\n        let service = new NegociacaoService();\n        service.obterNegociacaoesDaSemana((erro, negociacoes) => {\n\n            if (erro){\n                this._mensagem.texto = erro;\n                return;\n            }\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\n\n            service.obterNegociacaoesDaSemanaAnterior((erro, negociacoes) => {\n\n                if (erro){\n                    this._mensagem.texto = erro;\n                    return;\n                }\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\n\n                service.obterNegociacaoesDaSemanaRetrasada((erro, negociacoes) => {\n\n                    if (erro){\n                        this._mensagem.texto = erro;\n                        return;\n                    }    \n                    negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\n                    this._mensagem.texto = \"Negociações importadas com sucesso.\"\n                });                                \n            });                    \n        });\n        */\n\n       this._service.importa(this._listaNegociacoes.negociacoes)\n            .then(negociacoes => negociacoes.forEach(negociacao => {\n                this._listaNegociacoes.adiciona(negociacao)\n                this._mensagem.texto = 'Negociações importadas com sucesso.'\n            }))\n            .catch(erro => this._mensagem.texto = erro);            \n\n    }        \n\n    _criaNegociacao(){\n\n        return new Negociacao(\n            DateHelper.textoParaData(this._inputData.value), \n            parseInt(this._inputQuantidade.value), \n            parseFloat(this._inputValor.value)); \n    }\n\n    _limpaFormulario(){\n\n        this._inputData.value = '';\n        this._inputQuantidade.value = '1';\n        this._inputValor.value = 0.0;\n        this._inputData.focus();\n    }\n\n}\n\nlet negociacaoController = new NegociacaoController();\n\nexport function currentInstance() {\n\n    return negociacaoController;\n\n}"]}